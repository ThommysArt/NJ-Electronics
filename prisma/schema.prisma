generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role UserRole @default(CUSTOMER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  carts Cart[]
  orders Order[]
  chats Chat[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Category {
  categoryId String @id @default(uuid())
  name String 

  products Product[]
}

model Product {
  productId String @id @default(uuid())
  name String
  description String
  price Float @default(5000)
  reduction Float? @default(0)
  units Int @default(1)
  images String[]
  isAvailable Boolean @default(true)

  categoryId String
  category Category @relation(references: [categoryId], fields: [categoryId])

  cartItems CartItem[]
}

model Cart {
  cartId String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isOrdered Boolean @default(false)

  userId String

  order Order[]
  cartItems CartItem[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  cartItemId String @id @default(uuid())
  productId String
  product Product @relation(references: [productId], fields: [productId])
  units Int @default(1)
  price Float
  updatedAt DateTime @updatedAt

  cartId String
  cart Cart @relation(references: [cartId], fields: [cartId])
}

model Order {
  orderId String @id @default(uuid())
  amount Float @default(1000)
  isPaid Boolean @default(false)
  isDelivered Boolean @default(false)
  deliveryLocation String?
  paymentMethod String @default("Cash On Delivery")
  paymentName String
  paymentPhone String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(references: [id], fields: [userId])

  cartId String
  cart Cart @relation(references: [cartId], fields: [cartId])
}

model Chat {
  chatId String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Messages[]

  userId String
  user User @relation(references: [id], fields: [userId])
}

model Messages {
  messageId String @id @default(uuid())
  text String
  files String[]
  createdAt DateTime @default(now())
  isRead Boolean @default(false)
  isFromClient Boolean @default(true)
  

  chatId String
  chat Chat @relation(references: [chatId], fields: [chatId])
}